input {
  tcp {
    port => 5000
  }
  stdin {
  }
}

filter {
  if [message] =~ /Completed.in:/ {
    mutate {
      gsub => [
        "message", "runtime=-", ""
      ]
    }
    grok {
      match => { "message" => "%{IPORHOST:clientip} %{IPORHOST:vserver} %{USER:ident} %{USER:auth} \[%{HTTPDATE:lgtime}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response:int} (?:%{NUMBER:bytes:int}|-) %{QS:referrer} %{QS:agent} Completed in:%{NUMBER:completed_in:float},(runtime=%{NUMBER:runtime:float})?" }
    }
    geoip {
      fields => [ "city_name", "continent_code", "country_code2", "country_code3", "country_name", "latitude", "longitude", "postal_code", "region_name" ]
      source => "clientip"
    }
    useragent {
      source => "agent"
    }
    date {
      locale => 'en'
      target => '@timestamp'
      match => [ "lgtime" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    mutate { add_field => { m_type => "access_log" }}
    if [runtime] {
      mutate {
        add_field => { "served_by" => "rails" }
      }
    } else {
      mutate {
        add_field => { "served_by" => "nginx" }
      }
    }
  } else if [message] =~ /master.process.ready/ {
    grok {
      match => { "message" => "I, \[%{TIMESTAMP_ISO8601:lgtime} #%{NUMBER:pid}\] *%{DATA:loglevel} -- : *%{GREEDYDATA:msg}"}
    }
    mutate { add_field => { m_type => "unicorn_restart" }}
    date {
      locale => 'en'
      target => "@timestamp"
      match => ["lgtime", "yyyy-MM-dd'T'HH:mm:ss.SSSSSS"]
    }
  } else if [message] =~ /running.too.long/ {
    grok {
      match => { "message" => "E, \[%{TIMESTAMP_ISO8601:lgtime} #%{NUMBER:pid}\] *%{DATA:loglevel} -- : %{GREEDYDATA:msg}"}
    }
    mutate { add_field => { m_type => "unicorn_timeout" }}
    date {
      locale => 'en'
      target => "@timestamp"
      match => ["lgtime", "yyyy-MM-dd'T'HH:mm:ss.SSSSSS"]
    }
  } else if [message] =~ /TCK.Request/ {
    grok {
      match => { "message" => "I, \[%{TIMESTAMP_ISO8601:lgtime} #%{NUMBER:pid}\] *%{DATA:loglevel} -- : TCK Request Completed status=%{NUMBER:response:int} path=\[%{DATA:request}\] format=%{DATA:format} \(views=%{NUMBER:view_time:int}ms \| db=%{NUMBER:db_time:int}ms\) in %{NUMBER:request_time:int}ms" }
    }
    mutate { add_field => { m_type => "ruby_log" }}
    date {
      locale => 'en'
      target => "@timestamp"
      match => ["lgtime", "yyyy-MM-dd'T'HH:mm:ss.SSSSSS"]
    }
  } else if [message] =~ /GET http/ {
    grok {
      match => { "message" => "I, \[%{TIMESTAMP_ISO8601:lgtime} #%{NUMBER:pid}\] *%{DATA:loglevel} -- : GET %{DATA:request} \[status:%{NUMBER:status:int}, request:%{NUMBER:request_time:float}s, query:%{NUMBER:query_time:float}s]" }
    }
    mutate { add_field => { m_type => "curl_log" }}
    date {
      locale => 'en'
      target => "@timestamp"
      match => ["lgtime", "yyyy-MM-dd'T'HH:mm:ss.SSSSSS"]
    }
  }
}

output {
  if [m_type] {
    stdout { codec => rubydebug }
    elasticsearch { host => localhost
#                   cluster => "clustername"
                  }
  } else {
    stdout { codec => dots }
  }
}

